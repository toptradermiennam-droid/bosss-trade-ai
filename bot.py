import os
import time
import logging
import threading
from telebot import TeleBot, types

# === C·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render.com s·∫Ω d√πng ph·∫ßn n√†y) ===
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Token bot Telegram
GROUP_ID_ENV = os.getenv("GROUP_ID")  # ID nh√≥m Telegram nh·∫≠n t√≠n hi·ªáu
AUTHORIZED_USER_IDS = os.getenv("AUTHORIZED_USER_IDS", "")  # danh s√°ch ID ƒë∆∞·ª£c ph√©p g·ª≠i l·ªánh (t√πy ch·ªçn)

# === Ki·ªÉm tra l·ªói n·∫øu thi·∫øu bi·∫øn ===
if not TOKEN:
    raise SystemExit("ERROR: TELEGRAM_TOKEN environment variable is not set.")
if not GROUP_ID_ENV:
    raise SystemExit("ERROR: GROUP_ID environment variable is not set.")

try:
    GROUP_ID = int(GROUP_ID_ENV)
except ValueError:
    raise SystemExit("ERROR: GROUP_ID must be an integer (set via environment variable).")

# === Ph√¢n t√≠ch danh s√°ch user ƒë∆∞·ª£c ph√©p g·ª≠i l·ªánh ===
authorized_users = set()
if AUTHORIZED_USER_IDS.strip():
    for s in AUTHORIZED_USER_IDS.split(","):
        s = s.strip()
        if s.isdigit():
            authorized_users.add(int(s))

# === Logging (ghi nh·∫≠t k√Ω ho·∫°t ƒë·ªông) ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

bot = TeleBot(TOKEN, parse_mode="HTML")

# === T·ª± ƒë·ªông g·ª≠i t√≠n hi·ªáu ƒë·ªãnh k·ª≥ ===
def auto_send_signal(stop_event, interval_seconds=60):
    logging.info("Auto-signal thread started")
    while not stop_event.is_set():
        try:
            bot.send_message(GROUP_ID, "üìä T√≠n hi·ªáu t·ª± ƒë·ªông: CALL BTCUSDT / PUT BTCUSDT")
        except Exception as e:
            logging.exception(f"‚ùå L·ªói khi g·ª≠i t√≠n hi·ªáu t·ª± ƒë·ªông: {e}")
        stop_event.wait(interval_seconds)

# === L·ªánh /start ƒë·ªÉ ki·ªÉm tra bot ===
@bot.message_handler(commands=["start"])
def start_message(message):
    bot.reply_to(message, "ü§ñ Bosss Trade AI ƒë√£ ho·∫°t ƒë·ªông th√†nh c√¥ng!")

# === L·ªánh /signal ƒë·ªÉ g·ª≠i l·ªánh th·ªß c√¥ng ===
@bot.message_handler(commands=["signal"])
def manual_signal(message):
    user_id = message.from_user.id
    if authorized_users and user_id not in authorized_users:
        bot.reply_to(message, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i l·ªánh.")
        return

    payload = message.text.partition(" ")[2].strip() or "CALL BTCUSDT"
    try:
        bot.send_message(GROUP_ID, f"üìà L·ªánh th·ªß c√¥ng t·ª´ @{message.from_user.username or user_id}: {payload}")
        bot.reply_to(message, "‚úÖ L·ªánh ƒë√£ g·ª≠i th√†nh c√¥ng.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå G·ª≠i l·ªánh th·∫•t b·∫°i: {e}")

# === Ch·∫°y bot ===
def main():
    stop_event = threading.Event()
    t = threading.Thread(target=auto_send_signal, args=(stop_event,))
    t.start()
    bot.infinity_polling()

if __name__ == "__main__":
    main()
  
